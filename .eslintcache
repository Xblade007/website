[{"/Users/dan/Desktop/website/src/index.js":"1","/Users/dan/Desktop/website/src/reportWebVitals.js":"2","/Users/dan/Desktop/website/src/App.js":"3","/Users/dan/Desktop/website/src/pages/About.js":"4","/Users/dan/Desktop/website/src/pages/Contact.js":"5","/Users/dan/Desktop/website/src/pages/Home.js":"6","/Users/dan/Desktop/website/src/styles/Global.js":"7","/Users/dan/Desktop/website/src/pages/Projects.js":"8","/Users/dan/Desktop/website/src/components/extras/buildProjectSidebar.js":"9","/Users/dan/Desktop/website/src/components/HomeMain.js":"10","/Users/dan/Desktop/website/src/components/HomeSecondary.js":"11","/Users/dan/Desktop/website/src/components/Header.js":"12","/Users/dan/Desktop/website/src/components/ProjectSidebar.js":"13","/Users/dan/Desktop/website/src/components/extras/customFormatters.js":"14","/Users/dan/Desktop/website/src/components/extras/Divider.js":"15"},{"size":478,"mtime":1607792942664,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607792942666,"results":"18","hashOfConfig":"17"},{"size":974,"mtime":1608323000400,"results":"19","hashOfConfig":"17"},{"size":319,"mtime":1608322997236,"results":"20","hashOfConfig":"17"},{"size":194,"mtime":1607792942665,"results":"21","hashOfConfig":"17"},{"size":334,"mtime":1607792942665,"results":"22","hashOfConfig":"17"},{"size":606,"mtime":1607792942667,"results":"23","hashOfConfig":"17"},{"size":281,"mtime":1607793498282,"results":"24","hashOfConfig":"17"},{"size":7361,"mtime":1608323000401,"results":"25","hashOfConfig":"17"},{"size":1043,"mtime":1607792942662,"results":"26","hashOfConfig":"17"},{"size":1936,"mtime":1608323000401,"results":"27","hashOfConfig":"17"},{"size":2570,"mtime":1608323000400,"results":"28","hashOfConfig":"17"},{"size":12144,"mtime":1608323000401,"results":"29","hashOfConfig":"17"},{"size":201,"mtime":1608323000402,"results":"30","hashOfConfig":"17"},{"size":212,"mtime":1607792942663,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"nkzsuo",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dan/Desktop/website/src/index.js",[],["66","67"],"/Users/dan/Desktop/website/src/reportWebVitals.js",[],"/Users/dan/Desktop/website/src/App.js",["68","69"],"import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/Home\";\nimport AboutPage from \"./pages/About\";\nimport ContactPage from \"./pages/Contact\";\nimport ProjectsPage from \"./pages/Projects\";\nimport SidebarWith from \"./components/extras/buildProjectSidebar\";\nimport { Global } from \"./styles/Global\";\n\nconst items = [\n  {\n    name: \"Stacauto\",\n    label: \"Backend API\",\n  },\n  {\n    name: \"Stacauto\",\n    label: \"Shopify Lambda Function\"\n  },\n  {\n    name: \"Pathstream\",\n    label: \"Python Data Analysis\"\n  }\n]\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Global/>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/projects\" component={ ProjectsPage } />\n          <Route exact path=\"/about\" component={AboutPage} />\n          <Route exact path=\"/contact\" component={ContactPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/dan/Desktop/website/src/pages/About.js",[],"/Users/dan/Desktop/website/src/pages/Contact.js",[],"/Users/dan/Desktop/website/src/pages/Home.js",[],"/Users/dan/Desktop/website/src/styles/Global.js",[],"/Users/dan/Desktop/website/src/pages/Projects.js",[],"/Users/dan/Desktop/website/src/components/extras/buildProjectSidebar.js",["70"],"import React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  // ! useful for overiding material ui default typography\n  // https://stackoverflow.com/questions/43975839/material-ui-next-styling-text-inside-listitemtext\n  root: {\n    width: 350,\n    height: \"auto\",\n    color: \"#5C5C5C\",\n    fontWeight: \"bold\",\n    fontSize: \"20px\",\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n    minWidth: \"auto\",\n    fontSize: \"16px\",\n  },\n  header: {\n    paddingLeft: theme.spacing(2),\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"25px\",\n    paddingTop: \"20%\",\n  },\n}));\n\nfunction SidebarWith({ companyDetails }) {\n  const classes = useStyles();\n  const projectArray = [];\n  companyDetails.forEach((company) =>\n    company.projects.forEach((project) => projectArray.push(project.label))\n  );\n  const initialProjectState = {};\n  projectArray.forEach((project) => (initialProjectState[project] = false));\n\n  const [open, setOpen] = useState({\n    Stacauto: false,\n    Pathstream: false,\n    Jam: false,\n    \"Wilbur Labs\": false,\n  });\n  const [projectClicked, setProjectClicked] = useState(initialProjectState);\n\n  const companyNames = companyDetails.map((company) => {\n    return company.companyName;\n  });\n  const projectDetails = {};\n  companyDetails.forEach((company) => {\n    projectDetails[company.companyName] = company.projects;\n  });\n\n  const handleCompanyOpen = (companyName) => {\n    console.log(open[companyName]);\n    setOpen({ [companyName]: !open[companyName] });\n  };\n\n  const handleProjectClicked = (projectName) => {\n    console.log(projectClicked[projectName]);\n    console.log(\"HANDLING PROJECT\");\n    console.log(projectName);\n    setProjectClicked({ [projectName]: !projectClicked[projectName] });\n  };\n\n  const companyFormattedComponents = [];\n  companyDetails.forEach((company) => {\n    companyFormattedComponents.push(\n      <React.Fragment key={company.companyName}>\n        <ListItem\n          className={classes.root}\n          key={company.companyName}\n          button\n          onClick={() => {\n            handleCompanyOpen(company.companyName);\n          }}\n        >\n          <ListItemText primary={company.companyName} disableTypography />\n          {open[company.companyName] ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        {Array.isArray(company.projects) ? (\n          <List>\n            {company.projects.map((project) => {\n              return (\n                <div>\n                  <Collapse\n                    in={open[company.companyName]}\n                    timeout=\"auto\"\n                    unmountOnExit\n                  >\n                    <List component=\"div\" disablePadding>\n                      <ListItem\n                        button\n                        key={company.companyName}\n                        className={classes.nested}\n                        onClick={() => {\n                          handleProjectClicked(project.label);\n                        }}\n                      >\n                        <ListItemText\n                          primary={project.label}\n                          disableTypography\n                        />\n                      </ListItem>\n                    </List>\n                  </Collapse>\n                </div>\n              );\n            })}\n          </List>\n        ) : (\n          <List>\n            <ListItem button>\n              <ListItemText key={company.companyName}>\n                Projects Coming Soon!\n              </ListItemText>\n            </ListItem>\n          </List>\n        )}\n      </React.Fragment>\n    );\n  });\n\n  const companyNameToDisplay = [];\n  companyNames.forEach((name) => {\n    return open[name]\n      ? companyNameToDisplay.push(\n          <h2 style={{ fontSize: \"60px\" }}> {name} was opened</h2>\n        )\n      : null;\n  });\n\n  const projectNameToDisplay = [];\n  companyNames.forEach((name) => {\n    if (open[name]) {\n      let companyProjects = projectDetails[name];\n      companyProjects.forEach((project) => {\n        console.log(projectClicked[project.label]);\n        console.log(project);\n\n        if (projectClicked[project.label]) {\n          const requirements = [];\n          project.meta.projectRequirements.forEach((p) => {\n            requirements.push(<li >{p}</li>);\n          });\n          const techStack = [];\n          project.meta.techStack.forEach((p) => {\n            techStack.push(<li>{p}</li>);\n          });\n          const problemsSolved = [];\n          project.meta.problemsSolved.forEach((p) => {\n            problemsSolved.push(<li>{p}</li>);\n          });\n          return projectNameToDisplay.push(\n            <Jumbotron style={{ backgroundColor: \"#C8C8C8\", maxWidth: \"65%\" }}>\n              <h1>{project.label}</h1>\n              <p>{project.meta.description}</p>\n              <p>\n                <Button variant=\"primary\">Demo</Button>\n              </p>\n              <Accordion>\n                <Card>\n                  <Card.Header>\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                      Project Requirements\n                    </Accordion.Toggle>\n                  </Card.Header>\n                  <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>{requirements}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Card.Header>\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                      Tech Stack Used\n                    </Accordion.Toggle>\n                  </Card.Header>\n                  <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>{techStack}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n                <Card>\n                  <Card.Header>\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                      Outcomes\n                    </Accordion.Toggle>\n                  </Card.Header>\n                  <Accordion.Collapse eventKey=\"2\">\n                    <Card.Body>{problemsSolved}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Jumbotron>\n          );\n        }\n      });\n    }\n  });\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <List>\n        <h1 className={classes.header}>Professional Projects</h1>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding></List>\n        </Collapse>\n        {companyFormattedComponents}\n      </List>\n      {/* {companyNameToDisplay} */}\n      {projectNameToDisplay}\n    </div>\n  );\n}\n\nexport default SidebarWith;\n","/Users/dan/Desktop/website/src/components/HomeMain.js",[],"/Users/dan/Desktop/website/src/components/HomeSecondary.js",["71"],"import styled from \"styled-components\";\nimport Divider from \"./extras/Divider\";\nimport { formatOf } from \"./extras/customFormatters\";\n\nconst SecondaryCard = styled.div`\n  background-color: ${(props) => props.color || \"#748592\"};\n`;\n\nconst SupportingContentWrapper = styled.div`\n  display: flex;\n  background-color: #c8c8c8;\n  justify-content: center;\n`;\n\nconst SupportContentText = styled.p`\n  padding-top: 2%;\n  font-size: 24px;\n  color: #525252;\n  width: 65%;\n`;\n\nconst HomePageSupporters = () => {\n  return (\n    <SecondaryCard>\n      <Divider />\n      <SupportingContentWrapper>\n          <SupportContentText>\n          Hello&#128075; My name is Dan, and I'm a Senior at \n          <a href= \"https://www.davidson.edu/\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#748592\", textDecoration: \"underline\", textDecorationColor: \"#C8C8C8\", fontWeight: \"bold\" }}> \n          {' '}Davidson College\n          </a>. I'm an Economics major, and I spend most of my time coding, reading, and working on \n          <a href= \"/projects\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#748592\", textDecoration: \"underline\", textDecorationColor: \"#C8C8C8\", fontWeight: \"bold\" }}>\n          {' '}personal projects\n          </a>. I'm passionate about contributing to Open Source Software, designing accessible and easy-to-use Interfaces, and building a more equitable technoligical future.\n          <br/><br/>Learn more <a href= \"/about\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#748592\", textDecoration: \"underline\", textDecorationColor: \"#C8C8C8\", fontWeight: \"bold\" }}>about me</a>\n          {' ' }and the things I'm <a href= \"/projects\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#748592\", textDecoration: \"underline\", textDecorationColor: \"#C8C8C8\", fontWeight: \"bold\" }}>working on</a>!\n          </SupportContentText>\n      </SupportingContentWrapper>\n    </SecondaryCard>\n  );\n};\n\nexport default HomePageSupporters;\n","/Users/dan/Desktop/website/src/components/Header.js",[],"/Users/dan/Desktop/website/src/components/ProjectSidebar.js",[],"/Users/dan/Desktop/website/src/components/extras/customFormatters.js",[],"/Users/dan/Desktop/website/src/components/extras/Divider.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":19},{"ruleId":"76","severity":1,"message":"80","line":9,"column":7,"nodeType":"78","messageId":"79","endLine":9,"endColumn":12},{"ruleId":"76","severity":1,"message":"81","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":21},{"ruleId":"76","severity":1,"message":"82","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":18},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'SidebarWith' is defined but never used.","Identifier","unusedVar","'items' is assigned a value but never used.","'ListSubheader' is defined but never used.","'formatOf' is defined but never used.","no-global-assign","no-unsafe-negation"]
